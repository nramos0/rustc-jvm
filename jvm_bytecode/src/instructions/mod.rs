pub mod instr_code;

use std::io::{Result, Write};

/// A JVM instruction.
///
/// All instructions have the same name as in the Java SE 17 specification, except for
/// the "return" instruction, which in the Instruction enum below is "_return"
#[allow(non_camel_case_types)]
#[derive(Debug)]
pub enum Instruction {
    aaload,
    aastore,
    aconst_null,
    aload(u8),
    aload_0,
    aload_1,
    aload_2,
    aload_3,
    anewarray(u8, u8),
    areturn,
    arraylength,
    astore(u8),
    astore_0,
    astore_1,
    astore_2,
    astore_3,
    athrow,
    baload,
    bastore,
    bipush(u8),
    caload,
    castore,
    checkcast(u8, u8),
    d2f,
    d2i,
    d2l,
    dadd,
    daload,
    dastore,
    dcmpg,
    dcmpl,
    dconst_0,
    dconst_1,
    ddiv,
    dload(u8),
    dload_0,
    dload_1,
    dload_2,
    dload_3,
    dmul,
    dneg,
    drem,
    dreturn,
    dstore(u8),
    dstore_0,
    dstore_1,
    dstore_2,
    dstore_3,
    dsub,
    dup,
    dup_x1,
    dup_x2,
    dup2,
    dup2_x1,
    dup2_x2,
    f2d,
    f2i,
    f2l,
    fadd,
    faload,
    fastore,
    fcmpg,
    fcmpl,
    fconst_0,
    fconst_1,
    fconst_2,
    fdiv,
    fload(u8),
    fload_0,
    fload_1,
    fload_2,
    fload_3,
    fmul,
    fneg,
    frem,
    freturn,
    fstore(u8),
    fstore_0,
    fstore_1,
    fstore_2,
    fstore_3,
    fsub,
    getfield(u8, u8),
    getstatic(u8, u8),
    goto(u8, u8),
    goto_w(u8, u8, u8, u8),
    i2b,
    i2c,
    i2d,
    i2f,
    i2l,
    i2s,
    iadd,
    iaload,
    iand,
    iastore,
    iconst_m1,
    iconst_0,
    iconst_1,
    iconst_2,
    iconst_3,
    iconst_4,
    iconst_5,
    idiv,
    if_acmpeq(u8, u8),
    if_acmpne(u8, u8),
    if_icmpeq(u8, u8),
    if_icmpne(u8, u8),
    if_icmplt(u8, u8),
    if_icmpge(u8, u8),
    if_icmpgt(u8, u8),
    if_icmple(u8, u8),
    ifeq(u8, u8),
    ifne(u8, u8),
    iflt(u8, u8),
    ifge(u8, u8),
    ifgt(u8, u8),
    ifle(u8, u8),
    ifnonnull(u8, u8),
    ifnull(u8, u8),
    iinc(u8, u8),
    iload(u8),
    iload_0,
    iload_1,
    iload_2,
    iload_3,
    imul,
    ineg,
    instanceof(u8, u8),
    invokedynamic(u8, u8, u8, u8),
    invokeinterface(u8, u8, u8, u8),
    invokespecial(u8, u8),
    invokestatic(u8, u8),
    invokevirtual(u8, u8),
    ior,
    irem,
    ireturn,
    ishl,
    ishr,
    istore(u8),
    istore_0,
    istore_1,
    istore_2,
    istore_3,
    isub,
    iushr,
    ixor,
    jsr(u8, u8),
    jsr_w(u8, u8, u8, u8),
    l2d,
    l2f,
    l2i,
    ladd,
    laload,
    land,
    lastore,
    lcmp,
    lconst_0,
    lconst_1,
    ldc(u8),
    ldc_w(u8, u8),
    ldc2_w(u8, u8),
    ldiv,
    lload(u8),
    lload_0,
    lload_1,
    lload_2,
    lload_3,
    lmul,
    lneg,
    lookupswitch(Vec<u8>),
    lor,
    lrem,
    lreturn,
    lshl,
    lshr,
    lstore(u8),
    lstore_0,
    lstore_1,
    lstore_2,
    lstore_3,
    lsub,
    lushr,
    lxor,
    monitorenter,
    monitorexit,
    multianewarray(u8, u8, u8),
    new(u8, u8),
    newarray(u8),
    nop,
    pop,
    pop2,
    putfield(u8, u8),
    putstatic(u8, u8),
    ret(u8),
    _return,
    saload,
    sastore,
    sipush(u8, u8),
    swap,
    tableswitch(Vec<u8>),
    wide(u8, u8, u8, Option<(u8, u8)>),
}

impl Instruction {
    pub fn opcode(&self) -> u8 {
        match self {
            Instruction::aaload { .. } => instr_code::aaload,
            Instruction::aastore { .. } => instr_code::aastore,
            Instruction::aconst_null { .. } => instr_code::aconst_null,
            Instruction::aload { .. } => instr_code::aload,
            Instruction::aload_0 { .. } => instr_code::aload_0,
            Instruction::aload_1 { .. } => instr_code::aload_1,
            Instruction::aload_2 { .. } => instr_code::aload_2,
            Instruction::aload_3 { .. } => instr_code::aload_3,
            Instruction::anewarray { .. } => instr_code::anewarray,
            Instruction::areturn { .. } => instr_code::areturn,
            Instruction::arraylength { .. } => instr_code::arraylength,
            Instruction::astore { .. } => instr_code::astore,
            Instruction::astore_0 { .. } => instr_code::astore_0,
            Instruction::astore_1 { .. } => instr_code::astore_1,
            Instruction::astore_2 { .. } => instr_code::astore_2,
            Instruction::astore_3 { .. } => instr_code::astore_3,
            Instruction::athrow { .. } => instr_code::athrow,
            Instruction::baload { .. } => instr_code::baload,
            Instruction::bastore { .. } => instr_code::bastore,
            Instruction::bipush { .. } => instr_code::bipush,
            Instruction::caload { .. } => instr_code::caload,
            Instruction::castore { .. } => instr_code::castore,
            Instruction::checkcast { .. } => instr_code::checkcast,
            Instruction::d2f { .. } => instr_code::d2f,
            Instruction::d2i { .. } => instr_code::d2i,
            Instruction::d2l { .. } => instr_code::d2l,
            Instruction::dadd { .. } => instr_code::dadd,
            Instruction::daload { .. } => instr_code::daload,
            Instruction::dastore { .. } => instr_code::dastore,
            Instruction::dcmpg { .. } => instr_code::dcmpg,
            Instruction::dcmpl { .. } => instr_code::dcmpl,
            Instruction::dconst_0 { .. } => instr_code::dconst_0,
            Instruction::dconst_1 { .. } => instr_code::dconst_1,
            Instruction::ddiv { .. } => instr_code::ddiv,
            Instruction::dload { .. } => instr_code::dload,
            Instruction::dload_0 { .. } => instr_code::dload_0,
            Instruction::dload_1 { .. } => instr_code::dload_1,
            Instruction::dload_2 { .. } => instr_code::dload_2,
            Instruction::dload_3 { .. } => instr_code::dload_3,
            Instruction::dmul { .. } => instr_code::dmul,
            Instruction::dneg { .. } => instr_code::dneg,
            Instruction::drem { .. } => instr_code::drem,
            Instruction::dreturn { .. } => instr_code::dreturn,
            Instruction::dstore { .. } => instr_code::dstore,
            Instruction::dstore_0 { .. } => instr_code::dstore_0,
            Instruction::dstore_1 { .. } => instr_code::dstore_1,
            Instruction::dstore_2 { .. } => instr_code::dstore_2,
            Instruction::dstore_3 { .. } => instr_code::dstore_3,
            Instruction::dsub { .. } => instr_code::dsub,
            Instruction::dup { .. } => instr_code::dup,
            Instruction::dup_x1 { .. } => instr_code::dup_x1,
            Instruction::dup_x2 { .. } => instr_code::dup_x2,
            Instruction::dup2 { .. } => instr_code::dup2,
            Instruction::dup2_x1 { .. } => instr_code::dup2_x1,
            Instruction::dup2_x2 { .. } => instr_code::dup2_x2,
            Instruction::f2d { .. } => instr_code::f2d,
            Instruction::f2i { .. } => instr_code::f2i,
            Instruction::f2l { .. } => instr_code::f2l,
            Instruction::fadd { .. } => instr_code::fadd,
            Instruction::faload { .. } => instr_code::faload,
            Instruction::fastore { .. } => instr_code::fastore,
            Instruction::fcmpg { .. } => instr_code::fcmpg,
            Instruction::fcmpl { .. } => instr_code::fcmpl,
            Instruction::fconst_0 { .. } => instr_code::fconst_0,
            Instruction::fconst_1 { .. } => instr_code::fconst_1,
            Instruction::fconst_2 { .. } => instr_code::fconst_2,
            Instruction::fdiv { .. } => instr_code::fdiv,
            Instruction::fload { .. } => instr_code::fload,
            Instruction::fload_0 { .. } => instr_code::fload_0,
            Instruction::fload_1 { .. } => instr_code::fload_1,
            Instruction::fload_2 { .. } => instr_code::fload_2,
            Instruction::fload_3 { .. } => instr_code::fload_3,
            Instruction::fmul { .. } => instr_code::fmul,
            Instruction::fneg { .. } => instr_code::fneg,
            Instruction::frem { .. } => instr_code::frem,
            Instruction::freturn { .. } => instr_code::freturn,
            Instruction::fstore { .. } => instr_code::fstore,
            Instruction::fstore_0 { .. } => instr_code::fstore_0,
            Instruction::fstore_1 { .. } => instr_code::fstore_1,
            Instruction::fstore_2 { .. } => instr_code::fstore_2,
            Instruction::fstore_3 { .. } => instr_code::fstore_3,
            Instruction::fsub { .. } => instr_code::fsub,
            Instruction::getfield { .. } => instr_code::getfield,
            Instruction::getstatic { .. } => instr_code::getstatic,
            Instruction::goto { .. } => instr_code::goto,
            Instruction::goto_w { .. } => instr_code::goto_w,
            Instruction::i2b { .. } => instr_code::i2b,
            Instruction::i2c { .. } => instr_code::i2c,
            Instruction::i2d { .. } => instr_code::i2d,
            Instruction::i2f { .. } => instr_code::i2f,
            Instruction::i2l { .. } => instr_code::i2l,
            Instruction::i2s { .. } => instr_code::i2s,
            Instruction::iadd { .. } => instr_code::iadd,
            Instruction::iaload { .. } => instr_code::iaload,
            Instruction::iand { .. } => instr_code::iand,
            Instruction::iastore { .. } => instr_code::iastore,
            Instruction::iconst_m1 { .. } => instr_code::iconst_m1,
            Instruction::iconst_0 { .. } => instr_code::iconst_0,
            Instruction::iconst_1 { .. } => instr_code::iconst_1,
            Instruction::iconst_2 { .. } => instr_code::iconst_2,
            Instruction::iconst_3 { .. } => instr_code::iconst_3,
            Instruction::iconst_4 { .. } => instr_code::iconst_4,
            Instruction::iconst_5 { .. } => instr_code::iconst_5,
            Instruction::idiv { .. } => instr_code::idiv,
            Instruction::if_acmpeq { .. } => instr_code::if_acmpeq,
            Instruction::if_acmpne { .. } => instr_code::if_acmpne,
            Instruction::if_icmpeq { .. } => instr_code::if_icmpeq,
            Instruction::if_icmpne { .. } => instr_code::if_icmpne,
            Instruction::if_icmplt { .. } => instr_code::if_icmplt,
            Instruction::if_icmpge { .. } => instr_code::if_icmpge,
            Instruction::if_icmpgt { .. } => instr_code::if_icmpgt,
            Instruction::if_icmple { .. } => instr_code::if_icmple,
            Instruction::ifeq { .. } => instr_code::ifeq,
            Instruction::ifne { .. } => instr_code::ifne,
            Instruction::iflt { .. } => instr_code::iflt,
            Instruction::ifge { .. } => instr_code::ifge,
            Instruction::ifgt { .. } => instr_code::ifgt,
            Instruction::ifle { .. } => instr_code::ifle,
            Instruction::ifnonnull { .. } => instr_code::ifnonnull,
            Instruction::ifnull { .. } => instr_code::ifnull,
            Instruction::iinc { .. } => instr_code::iinc,
            Instruction::iload { .. } => instr_code::iload,
            Instruction::iload_0 { .. } => instr_code::iload_0,
            Instruction::iload_1 { .. } => instr_code::iload_1,
            Instruction::iload_2 { .. } => instr_code::iload_2,
            Instruction::iload_3 { .. } => instr_code::iload_3,
            Instruction::imul { .. } => instr_code::imul,
            Instruction::ineg { .. } => instr_code::ineg,
            Instruction::instanceof { .. } => instr_code::instanceof,
            Instruction::invokedynamic { .. } => instr_code::invokedynamic,
            Instruction::invokeinterface { .. } => instr_code::invokeinterface,
            Instruction::invokespecial { .. } => instr_code::invokespecial,
            Instruction::invokestatic { .. } => instr_code::invokestatic,
            Instruction::invokevirtual { .. } => instr_code::invokevirtual,
            Instruction::ior { .. } => instr_code::ior,
            Instruction::irem { .. } => instr_code::irem,
            Instruction::ireturn { .. } => instr_code::ireturn,
            Instruction::ishl { .. } => instr_code::ishl,
            Instruction::ishr { .. } => instr_code::ishr,
            Instruction::istore { .. } => instr_code::istore,
            Instruction::istore_0 { .. } => instr_code::istore_0,
            Instruction::istore_1 { .. } => instr_code::istore_1,
            Instruction::istore_2 { .. } => instr_code::istore_2,
            Instruction::istore_3 { .. } => instr_code::istore_3,
            Instruction::isub { .. } => instr_code::isub,
            Instruction::iushr { .. } => instr_code::iushr,
            Instruction::ixor { .. } => instr_code::ixor,
            Instruction::jsr { .. } => instr_code::jsr,
            Instruction::jsr_w { .. } => instr_code::jsr_w,
            Instruction::l2d { .. } => instr_code::l2d,
            Instruction::l2f { .. } => instr_code::l2f,
            Instruction::l2i { .. } => instr_code::l2i,
            Instruction::ladd { .. } => instr_code::ladd,
            Instruction::laload { .. } => instr_code::laload,
            Instruction::land { .. } => instr_code::land,
            Instruction::lastore { .. } => instr_code::lastore,
            Instruction::lcmp { .. } => instr_code::lcmp,
            Instruction::lconst_0 { .. } => instr_code::lconst_0,
            Instruction::lconst_1 { .. } => instr_code::lconst_1,
            Instruction::ldc { .. } => instr_code::ldc,
            Instruction::ldc_w { .. } => instr_code::ldc_w,
            Instruction::ldc2_w { .. } => instr_code::ldc2_w,
            Instruction::ldiv { .. } => instr_code::ldiv,
            Instruction::lload { .. } => instr_code::lload,
            Instruction::lload_0 { .. } => instr_code::lload_0,
            Instruction::lload_1 { .. } => instr_code::lload_1,
            Instruction::lload_2 { .. } => instr_code::lload_2,
            Instruction::lload_3 { .. } => instr_code::lload_3,
            Instruction::lmul { .. } => instr_code::lmul,
            Instruction::lneg { .. } => instr_code::lneg,
            Instruction::lookupswitch { .. } => instr_code::lookupswitch,
            Instruction::lor { .. } => instr_code::lor,
            Instruction::lrem { .. } => instr_code::lrem,
            Instruction::lreturn { .. } => instr_code::lreturn,
            Instruction::lshl { .. } => instr_code::lshl,
            Instruction::lshr { .. } => instr_code::lshr,
            Instruction::lstore { .. } => instr_code::lstore,
            Instruction::lstore_0 { .. } => instr_code::lstore_0,
            Instruction::lstore_1 { .. } => instr_code::lstore_1,
            Instruction::lstore_2 { .. } => instr_code::lstore_2,
            Instruction::lstore_3 { .. } => instr_code::lstore_3,
            Instruction::lsub { .. } => instr_code::lsub,
            Instruction::lushr { .. } => instr_code::lushr,
            Instruction::lxor { .. } => instr_code::lxor,
            Instruction::monitorenter { .. } => instr_code::monitorenter,
            Instruction::monitorexit { .. } => instr_code::monitorexit,
            Instruction::multianewarray { .. } => instr_code::multianewarray,
            Instruction::new { .. } => instr_code::new,
            Instruction::newarray { .. } => instr_code::newarray,
            Instruction::nop { .. } => instr_code::nop,
            Instruction::pop { .. } => instr_code::pop,
            Instruction::pop2 { .. } => instr_code::pop2,
            Instruction::putfield { .. } => instr_code::putfield,
            Instruction::putstatic { .. } => instr_code::putstatic,
            Instruction::ret { .. } => instr_code::ret,
            Instruction::_return { .. } => instr_code::_return,
            Instruction::saload { .. } => instr_code::saload,
            Instruction::sastore { .. } => instr_code::sastore,
            Instruction::sipush { .. } => instr_code::sipush,
            Instruction::swap { .. } => instr_code::swap,
            Instruction::tableswitch { .. } => instr_code::tableswitch,
            Instruction::wide { .. } => instr_code::wide,
        }
    }

    pub fn to_byte_vec(&self) -> Vec<u8> {
        let mut bytes = Vec::with_capacity(7);
        bytes.push(self.opcode());

        match self {
            Instruction::aload(index)
            | Instruction::astore(index)
            | Instruction::dload(index)
            | Instruction::dstore(index)
            | Instruction::fload(index)
            | Instruction::fstore(index)
            | Instruction::iload(index)
            | Instruction::istore(index)
            | Instruction::ldc(index)
            | Instruction::lload(index)
            | Instruction::lstore(index)
            | Instruction::ret(index) => {
                bytes.push(*index);
            }
            Instruction::anewarray(indexbyte1, indexbyte2)
            | Instruction::checkcast(indexbyte1, indexbyte2)
            | Instruction::getfield(indexbyte1, indexbyte2)
            | Instruction::getstatic(indexbyte1, indexbyte2)
            | Instruction::instanceof(indexbyte1, indexbyte2)
            | Instruction::invokespecial(indexbyte1, indexbyte2)
            | Instruction::invokestatic(indexbyte1, indexbyte2)
            | Instruction::invokevirtual(indexbyte1, indexbyte2)
            | Instruction::ldc_w(indexbyte1, indexbyte2)
            | Instruction::ldc2_w(indexbyte1, indexbyte2)
            | Instruction::new(indexbyte1, indexbyte2)
            | Instruction::putfield(indexbyte1, indexbyte2)
            | Instruction::putstatic(indexbyte1, indexbyte2) => {
                bytes.push(*indexbyte1);
                bytes.push(*indexbyte2);
            }
            Instruction::bipush(byte) => {
                bytes.push(*byte);
            }
            Instruction::goto(branchbyte1, branchbyte2)
            | Instruction::if_acmpeq(branchbyte1, branchbyte2)
            | Instruction::if_acmpne(branchbyte1, branchbyte2)
            | Instruction::if_icmpeq(branchbyte1, branchbyte2)
            | Instruction::if_icmpne(branchbyte1, branchbyte2)
            | Instruction::if_icmplt(branchbyte1, branchbyte2)
            | Instruction::if_icmpge(branchbyte1, branchbyte2)
            | Instruction::if_icmpgt(branchbyte1, branchbyte2)
            | Instruction::if_icmple(branchbyte1, branchbyte2)
            | Instruction::ifeq(branchbyte1, branchbyte2)
            | Instruction::ifne(branchbyte1, branchbyte2)
            | Instruction::iflt(branchbyte1, branchbyte2)
            | Instruction::ifge(branchbyte1, branchbyte2)
            | Instruction::ifgt(branchbyte1, branchbyte2)
            | Instruction::ifle(branchbyte1, branchbyte2)
            | Instruction::ifnonnull(branchbyte1, branchbyte2)
            | Instruction::ifnull(branchbyte1, branchbyte2)
            | Instruction::jsr(branchbyte1, branchbyte2) => {
                bytes.push(*branchbyte1);
                bytes.push(*branchbyte2);
            }
            Instruction::goto_w(branchbyte1, branchbyte2, branchbyte3, branchbyte4)
            | Instruction::jsr_w(branchbyte1, branchbyte2, branchbyte3, branchbyte4) => {
                bytes.push(*branchbyte1);
                bytes.push(*branchbyte2);
                bytes.push(*branchbyte3);
                bytes.push(*branchbyte4);
            }
            Instruction::iinc(index, constant) => {
                bytes.push(*index);
                bytes.push(*constant);
            }
            Instruction::invokedynamic(indexbyte1, indexbyte2, zero1, zero2) => {
                bytes.push(*indexbyte1);
                bytes.push(*indexbyte2);
                assert_eq!(*zero1, 0);
                assert_eq!(*zero2, 0);
                bytes.push(*zero1);
                bytes.push(*zero2);
            }
            Instruction::invokeinterface(indexbyte1, indexbyte2, count, zero) => {
                bytes.push(*indexbyte1);
                bytes.push(*indexbyte2);
                bytes.push(*count);
                assert_eq!(*zero, 0);
                bytes.push(*zero);
            }
            Instruction::lookupswitch(_) => todo!(),
            Instruction::multianewarray(indexbyte1, indexbyte2, dimensions) => {
                bytes.push(*indexbyte1);
                bytes.push(*indexbyte2);
                bytes.push(*dimensions);
            }
            Instruction::newarray(atype) => {
                bytes.push(*atype);
            }
            Instruction::sipush(byte1, byte2) => {
                bytes.push(*byte1);
                bytes.push(*byte2);
            }
            Instruction::tableswitch(_) => todo!(),
            Instruction::wide(opcode, indexbyte1, indexbyte2, constbyte12_opt) => {
                bytes.push(*opcode);
                bytes.push(*indexbyte1);
                bytes.push(*indexbyte2);
                if *opcode == Instruction::iinc(0, 0).opcode() {
                    // format 2
                    assert!(constbyte12_opt.is_some());
                    let (constbyte1, constbyte2) = constbyte12_opt.unwrap();
                    bytes.push(constbyte1);
                    bytes.push(constbyte2);
                } else {
                    // format 1
                    assert!(constbyte12_opt.is_none());
                }
            }
            _ => {}
        };

        bytes
    }

    pub fn emit(&self, mut wt: impl Write) -> Result<usize> {
        wt.write(&self.to_byte_vec()[..])
    }

    pub fn byte_len(&self) -> usize {
        match self {
            Instruction::aaload => 1,
            Instruction::aastore => 1,
            Instruction::aconst_null => 1,
            Instruction::aload(_) => 2,
            Instruction::aload_0 => 1,
            Instruction::aload_1 => 1,
            Instruction::aload_2 => 1,
            Instruction::aload_3 => 1,
            Instruction::anewarray(_, _) => 3,
            Instruction::areturn => 1,
            Instruction::arraylength => 1,
            Instruction::astore(_) => 2,
            Instruction::astore_0 => 1,
            Instruction::astore_1 => 1,
            Instruction::astore_2 => 1,
            Instruction::astore_3 => 1,
            Instruction::athrow => 1,
            Instruction::baload => 1,
            Instruction::bastore => 1,
            Instruction::bipush(_) => 2,
            Instruction::caload => 1,
            Instruction::castore => 1,
            Instruction::checkcast(_, _) => 3,
            Instruction::d2f => 1,
            Instruction::d2i => 1,
            Instruction::d2l => 1,
            Instruction::dadd => 1,
            Instruction::daload => 1,
            Instruction::dastore => 1,
            Instruction::dcmpg => 1,
            Instruction::dcmpl => 1,
            Instruction::dconst_0 => 1,
            Instruction::dconst_1 => 1,
            Instruction::ddiv => 1,
            Instruction::dload(_) => 2,
            Instruction::dload_0 => 1,
            Instruction::dload_1 => 1,
            Instruction::dload_2 => 1,
            Instruction::dload_3 => 1,
            Instruction::dmul => 1,
            Instruction::dneg => 1,
            Instruction::drem => 1,
            Instruction::dreturn => 1,
            Instruction::dstore(_) => 2,
            Instruction::dstore_0 => 1,
            Instruction::dstore_1 => 1,
            Instruction::dstore_2 => 1,
            Instruction::dstore_3 => 1,
            Instruction::dsub => 1,
            Instruction::dup => 1,
            Instruction::dup_x1 => 1,
            Instruction::dup_x2 => 1,
            Instruction::dup2 => 1,
            Instruction::dup2_x1 => 1,
            Instruction::dup2_x2 => 1,
            Instruction::f2d => 1,
            Instruction::f2i => 1,
            Instruction::f2l => 1,
            Instruction::fadd => 1,
            Instruction::faload => 1,
            Instruction::fastore => 1,
            Instruction::fcmpg => 1,
            Instruction::fcmpl => 1,
            Instruction::fconst_0 => 1,
            Instruction::fconst_1 => 1,
            Instruction::fconst_2 => 1,
            Instruction::fdiv => 1,
            Instruction::fload(_) => 2,
            Instruction::fload_0 => 1,
            Instruction::fload_1 => 1,
            Instruction::fload_2 => 1,
            Instruction::fload_3 => 1,
            Instruction::fmul => 1,
            Instruction::fneg => 1,
            Instruction::frem => 1,
            Instruction::freturn => 1,
            Instruction::fstore(_) => 2,
            Instruction::fstore_0 => 1,
            Instruction::fstore_1 => 1,
            Instruction::fstore_2 => 1,
            Instruction::fstore_3 => 1,
            Instruction::fsub => 1,
            Instruction::getfield(_, _) => 3,
            Instruction::getstatic(_, _) => 3,
            Instruction::goto(_, _) => 3,
            Instruction::goto_w(_, _, _, _) => 5,
            Instruction::i2b => 1,
            Instruction::i2c => 1,
            Instruction::i2d => 1,
            Instruction::i2f => 1,
            Instruction::i2l => 1,
            Instruction::i2s => 1,
            Instruction::iadd => 1,
            Instruction::iaload => 1,
            Instruction::iand => 1,
            Instruction::iastore => 1,
            Instruction::iconst_m1 => 1,
            Instruction::iconst_0 => 1,
            Instruction::iconst_1 => 1,
            Instruction::iconst_2 => 1,
            Instruction::iconst_3 => 1,
            Instruction::iconst_4 => 1,
            Instruction::iconst_5 => 1,
            Instruction::idiv => 1,
            Instruction::if_acmpeq(_, _) => 3,
            Instruction::if_acmpne(_, _) => 3,
            Instruction::if_icmpeq(_, _) => 3,
            Instruction::if_icmpne(_, _) => 3,
            Instruction::if_icmplt(_, _) => 3,
            Instruction::if_icmpge(_, _) => 3,
            Instruction::if_icmpgt(_, _) => 3,
            Instruction::if_icmple(_, _) => 3,
            Instruction::ifeq(_, _) => 3,
            Instruction::ifne(_, _) => 3,
            Instruction::iflt(_, _) => 3,
            Instruction::ifge(_, _) => 3,
            Instruction::ifgt(_, _) => 3,
            Instruction::ifle(_, _) => 3,
            Instruction::ifnonnull(_, _) => 3,
            Instruction::ifnull(_, _) => 3,
            Instruction::iinc(_, _) => 3,
            Instruction::iload(_) => 2,
            Instruction::iload_0 => 1,
            Instruction::iload_1 => 1,
            Instruction::iload_2 => 1,
            Instruction::iload_3 => 1,
            Instruction::imul => 1,
            Instruction::ineg => 1,
            Instruction::instanceof(_, _) => 3,
            Instruction::invokedynamic(_, _, _, _) => 5,
            Instruction::invokeinterface(_, _, _, _) => 5,
            Instruction::invokespecial(_, _) => 3,
            Instruction::invokestatic(_, _) => 3,
            Instruction::invokevirtual(_, _) => 3,
            Instruction::ior => 1,
            Instruction::irem => 1,
            Instruction::ireturn => 1,
            Instruction::ishl => 1,
            Instruction::ishr => 1,
            Instruction::istore(_) => 2,
            Instruction::istore_0 => 1,
            Instruction::istore_1 => 1,
            Instruction::istore_2 => 1,
            Instruction::istore_3 => 1,
            Instruction::isub => 1,
            Instruction::iushr => 1,
            Instruction::ixor => 1,
            Instruction::jsr(_, _) => 3,
            Instruction::jsr_w(_, _, _, _) => 5,
            Instruction::l2d => 1,
            Instruction::l2f => 1,
            Instruction::l2i => 1,
            Instruction::ladd => 1,
            Instruction::laload => 1,
            Instruction::land => 1,
            Instruction::lastore => 1,
            Instruction::lcmp => 1,
            Instruction::lconst_0 => 1,
            Instruction::lconst_1 => 1,
            Instruction::ldc(_) => 2,
            Instruction::ldc_w(_, _) => 3,
            Instruction::ldc2_w(_, _) => 3,
            Instruction::ldiv => 1,
            Instruction::lload(_) => 2,
            Instruction::lload_0 => 1,
            Instruction::lload_1 => 1,
            Instruction::lload_2 => 1,
            Instruction::lload_3 => 1,
            Instruction::lmul => 1,
            Instruction::lneg => 1,
            Instruction::lookupswitch(v) => v.len() + 1,
            Instruction::lor => 1,
            Instruction::lrem => 1,
            Instruction::lreturn => 1,
            Instruction::lshl => 1,
            Instruction::lshr => 1,
            Instruction::lstore(_) => 2,
            Instruction::lstore_0 => 1,
            Instruction::lstore_1 => 1,
            Instruction::lstore_2 => 1,
            Instruction::lstore_3 => 1,
            Instruction::lsub => 1,
            Instruction::lushr => 1,
            Instruction::lxor => 1,
            Instruction::monitorenter => 1,
            Instruction::monitorexit => 1,
            Instruction::multianewarray(_, _, _) => 4,
            Instruction::new(_, _) => 3,
            Instruction::newarray(_) => 2,
            Instruction::nop => 1,
            Instruction::pop => 1,
            Instruction::pop2 => 1,
            Instruction::putfield(_, _) => 3,
            Instruction::putstatic(_, _) => 3,
            Instruction::ret(_) => 2,
            Instruction::_return => 1,
            Instruction::saload => 1,
            Instruction::sastore => 1,
            Instruction::sipush(_, _) => 3,
            Instruction::swap => 1,
            Instruction::tableswitch(v) => v.len() + 1,
            Instruction::wide(_, _, _, _) => 4,
        }
    }

    pub fn from_byte(byte: u8, mut iter: impl Iterator<Item = u8>) -> Option<Self> {
        Some(match byte {
            0x32 => Instruction::aaload,
            0x53 => Instruction::aastore,
            0x01 => Instruction::aconst_null,
            0x19 => Instruction::aload(iter.next()?),
            0x2A => Instruction::aload_0,
            0x2B => Instruction::aload_1,
            0x2C => Instruction::aload_2,
            0x2D => Instruction::aload_3,
            0xBD => Instruction::anewarray(iter.next()?, iter.next()?),
            0xB0 => Instruction::areturn,
            0xBE => Instruction::arraylength,
            0x3A => Instruction::astore(iter.next()?),
            0x4B => Instruction::astore_0,
            0x4C => Instruction::astore_1,
            0x4D => Instruction::astore_2,
            0x4E => Instruction::astore_3,
            0xBF => Instruction::athrow,
            0x33 => Instruction::baload,
            0x54 => Instruction::bastore,
            0x10 => Instruction::bipush(iter.next()?),
            0x34 => Instruction::caload,
            0x55 => Instruction::castore,
            0xC0 => Instruction::checkcast(iter.next()?, iter.next()?),
            0x90 => Instruction::d2f,
            0x8E => Instruction::d2i,
            0x8F => Instruction::d2l,
            0x63 => Instruction::dadd,
            0x31 => Instruction::daload,
            0x52 => Instruction::dastore,
            0x98 => Instruction::dcmpg,
            0x97 => Instruction::dcmpl,
            0x0E => Instruction::dconst_0,
            0x0F => Instruction::dconst_1,
            0x6F => Instruction::ddiv,
            0x18 => Instruction::dload(iter.next()?),
            0x26 => Instruction::dload_0,
            0x27 => Instruction::dload_1,
            0x28 => Instruction::dload_2,
            0x29 => Instruction::dload_3,
            0x6B => Instruction::dmul,
            0x77 => Instruction::dneg,
            0x73 => Instruction::drem,
            0xAF => Instruction::dreturn,
            0x39 => Instruction::dstore(iter.next()?),
            0x47 => Instruction::dstore_0,
            0x48 => Instruction::dstore_1,
            0x49 => Instruction::dstore_2,
            0x4A => Instruction::dstore_3,
            0x67 => Instruction::dsub,
            0x59 => Instruction::dup,
            0x5A => Instruction::dup_x1,
            0x5B => Instruction::dup_x2,
            0x5C => Instruction::dup2,
            0x5D => Instruction::dup2_x1,
            0x5E => Instruction::dup2_x2,
            0x8D => Instruction::f2d,
            0x8B => Instruction::f2i,
            0x8C => Instruction::f2l,
            0x62 => Instruction::fadd,
            0x30 => Instruction::faload,
            0x51 => Instruction::fastore,
            0x96 => Instruction::fcmpg,
            0x95 => Instruction::fcmpl,
            0x0B => Instruction::fconst_0,
            0x0C => Instruction::fconst_1,
            0x0D => Instruction::fconst_2,
            0x6E => Instruction::fdiv,
            0x17 => Instruction::fload(iter.next()?),
            0x22 => Instruction::fload_0,
            0x23 => Instruction::fload_1,
            0x24 => Instruction::fload_2,
            0x25 => Instruction::fload_3,
            0x6A => Instruction::fmul,
            0x76 => Instruction::fneg,
            0x72 => Instruction::frem,
            0xAE => Instruction::freturn,
            0x38 => Instruction::fstore(iter.next()?),
            0x43 => Instruction::fstore_0,
            0x44 => Instruction::fstore_1,
            0x45 => Instruction::fstore_2,
            0x46 => Instruction::fstore_3,
            0x66 => Instruction::fsub,
            0xB4 => Instruction::getfield(iter.next()?, iter.next()?),
            0xB2 => Instruction::getstatic(iter.next()?, iter.next()?),
            0xA7 => Instruction::goto(iter.next()?, iter.next()?),
            0xC8 => Instruction::goto_w(iter.next()?, iter.next()?, iter.next()?, iter.next()?),
            0x91 => Instruction::i2b,
            0x92 => Instruction::i2c,
            0x87 => Instruction::i2d,
            0x86 => Instruction::i2f,
            0x85 => Instruction::i2l,
            0x93 => Instruction::i2s,
            0x60 => Instruction::iadd,
            0x2E => Instruction::iaload,
            0x7E => Instruction::iand,
            0x4F => Instruction::iastore,
            0x02 => Instruction::iconst_m1,
            0x03 => Instruction::iconst_0,
            0x04 => Instruction::iconst_1,
            0x05 => Instruction::iconst_2,
            0x06 => Instruction::iconst_3,
            0x07 => Instruction::iconst_4,
            0x08 => Instruction::iconst_5,
            0x6C => Instruction::idiv,
            0xA5 => Instruction::if_acmpeq(iter.next()?, iter.next()?),
            0xA6 => Instruction::if_acmpne(iter.next()?, iter.next()?),
            0x9F => Instruction::if_icmpeq(iter.next()?, iter.next()?),
            0xA0 => Instruction::if_icmpne(iter.next()?, iter.next()?),
            0xA1 => Instruction::if_icmplt(iter.next()?, iter.next()?),
            0xA2 => Instruction::if_icmpge(iter.next()?, iter.next()?),
            0xA3 => Instruction::if_icmpgt(iter.next()?, iter.next()?),
            0xA4 => Instruction::if_icmple(iter.next()?, iter.next()?),
            0x99 => Instruction::ifeq(iter.next()?, iter.next()?),
            0x9A => Instruction::ifne(iter.next()?, iter.next()?),
            0x9B => Instruction::iflt(iter.next()?, iter.next()?),
            0x9C => Instruction::ifge(iter.next()?, iter.next()?),
            0x9D => Instruction::ifgt(iter.next()?, iter.next()?),
            0x9E => Instruction::ifle(iter.next()?, iter.next()?),
            0xC7 => Instruction::ifnonnull(iter.next()?, iter.next()?),
            0xC6 => Instruction::ifnull(iter.next()?, iter.next()?),
            0x84 => Instruction::iinc(iter.next()?, iter.next()?),
            0x15 => Instruction::iload(iter.next()?),
            0x1A => Instruction::iload_0,
            0x1B => Instruction::iload_1,
            0x1C => Instruction::iload_2,
            0x1D => Instruction::iload_3,
            0x68 => Instruction::imul,
            0x74 => Instruction::ineg,
            0xC1 => Instruction::instanceof(iter.next()?, iter.next()?),
            0xBA => {
                Instruction::invokedynamic(iter.next()?, iter.next()?, iter.next()?, iter.next()?)
            }
            0xB9 => {
                Instruction::invokeinterface(iter.next()?, iter.next()?, iter.next()?, iter.next()?)
            }
            0xB7 => Instruction::invokespecial(iter.next()?, iter.next()?),
            0xB8 => Instruction::invokestatic(iter.next()?, iter.next()?),
            0xB6 => Instruction::invokevirtual(iter.next()?, iter.next()?),
            0x80 => Instruction::ior,
            0x70 => Instruction::irem,
            0xAC => Instruction::ireturn,
            0x78 => Instruction::ishl,
            0x7A => Instruction::ishr,
            0x36 => Instruction::istore(iter.next()?),
            0x3B => Instruction::istore_0,
            0x3C => Instruction::istore_1,
            0x3D => Instruction::istore_2,
            0x3E => Instruction::istore_3,
            0x64 => Instruction::isub,
            0x7C => Instruction::iushr,
            0x82 => Instruction::ixor,
            0xA8 => Instruction::jsr(iter.next()?, iter.next()?),
            0xC9 => Instruction::jsr_w(iter.next()?, iter.next()?, iter.next()?, iter.next()?),
            0x8A => Instruction::l2d,
            0x89 => Instruction::l2f,
            0x88 => Instruction::l2i,
            0x61 => Instruction::ladd,
            0x2F => Instruction::laload,
            0x7F => Instruction::land,
            0x50 => Instruction::lastore,
            0x94 => Instruction::lcmp,
            0x09 => Instruction::lconst_0,
            0x0A => Instruction::lconst_1,
            0x12 => Instruction::ldc(iter.next()?),
            0x13 => Instruction::ldc_w(iter.next()?, iter.next()?),
            0x14 => Instruction::ldc2_w(iter.next()?, iter.next()?),
            0x6D => Instruction::ldiv,
            0x16 => Instruction::lload(iter.next()?),
            0x1E => Instruction::lload_0,
            0x1F => Instruction::lload_1,
            0x20 => Instruction::lload_2,
            0x21 => Instruction::lload_3,
            0x69 => Instruction::lmul,
            0x75 => Instruction::lneg,
            0xAB => Instruction::lookupswitch(iter.collect()),
            0x81 => Instruction::lor,
            0x71 => Instruction::lrem,
            0xAD => Instruction::lreturn,
            0x79 => Instruction::lshl,
            0x7B => Instruction::lshr,
            0x37 => Instruction::lstore(iter.next()?),
            0x3F => Instruction::lstore_0,
            0x40 => Instruction::lstore_1,
            0x41 => Instruction::lstore_2,
            0x42 => Instruction::lstore_3,
            0x65 => Instruction::lsub,
            0x7D => Instruction::lushr,
            0x83 => Instruction::lxor,
            0xC2 => Instruction::monitorenter,
            0xC3 => Instruction::monitorexit,
            0xC5 => Instruction::multianewarray(iter.next()?, iter.next()?, iter.next()?),
            0xBB => Instruction::new(iter.next()?, iter.next()?),
            0xBC => Instruction::newarray(iter.next()?),
            0x00 => Instruction::nop,
            0x57 => Instruction::pop,
            0x58 => Instruction::pop2,
            0xB5 => Instruction::putfield(iter.next()?, iter.next()?),
            0xB3 => Instruction::putstatic(iter.next()?, iter.next()?),
            0xA9 => Instruction::ret(iter.next()?),
            0xB1 => Instruction::_return,
            0x35 => Instruction::saload,
            0x56 => Instruction::sastore,
            0x11 => Instruction::sipush(iter.next()?, iter.next()?),
            0x5F => Instruction::swap,
            0xAA => Instruction::tableswitch(iter.collect()),
            0xC4 => Instruction::wide(
                iter.next()?,
                iter.next()?,
                iter.next()?,
                Some((iter.next()?, iter.next()?)),
            ),
            _ => return None,
        })
    }
}

pub struct InstructionVec(pub Vec<Instruction>);

impl InstructionVec {
    pub fn to_byte_vec(self) -> Vec<u8> {
        let mut byte_vec = vec![];

        for instruction in self.0 {
            byte_vec.extend(instruction.to_byte_vec());
        }

        byte_vec
    }

    pub fn byte_len(&self) -> usize {
        self.0
            .iter()
            .map(|instr| instr.byte_len())
            .reduce(|accum, item| accum + item)
            .unwrap_or(0)
    }
}

pub enum ArrayType {
    Boolean = 4,
    Char = 5,
    Float = 6,
    Double = 7,
    Byte = 8,
    Short = 9,
    Int = 10,
    Long = 11,
}
